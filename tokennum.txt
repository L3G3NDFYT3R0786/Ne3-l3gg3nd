# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Fri Feb  9 23:35:26 2024
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'=='))
